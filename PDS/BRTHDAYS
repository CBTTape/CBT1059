/* REXX    BRTHDAYS   Scan FAMTREE table collecting birthdays and prep
                      listing of same.
   |**-***-***-***-***-***-***-***-***-***-***-***-***-***-***-***-**|
   |                                                                 |
   |          WARNING: EMBEDDED COMPONENTS.                          |
   |                      See text following TOOLKIT_INIT            |
   |                                                                 |
   |**-***-***-***-***-***-***-***-***-***-***-***-***-***-***-***-**|
           Use '(routine name)  ?' for HELP-text.

           Written by Frank Clarke  rexxhead@yahoo.com 20230202

     Impact Analysis
.    SYSEXEC   DFLTTLIB
.    SYSEXEC   STRSORT
.    SYSEXEC   TRAPOUT

     Modification History
     20230803 fxc use hhmm for log file name;
     20230806 fxc chg SYSPROC to SYSEXEC in Impact Analysis;
     20230810 fxc set msglim based on screen width;
     20230908 fxc set log lrecl to 255;
     20240308 fxc chg dollar-sign to @ everywhere;
     20240414 fxc DUMP_QUEUE quiet;
     20240818 fxc include spouse birthday; sort output;
     20240820 fxc add family to reference marker (FTSEQ) on output;
     20240827 fxc trap FAMILY not specified;
     20250403 fxc get missing parms via panel;
     20250406 fxc add logging in AP_;

*/ arg argline
address TSO                            /* REXXSKEL ver.20210402      */
arg parms "((" opts

signal on syntax
signal on novalue

call TOOLKIT_INIT                      /* conventional start-up     -*/
rc = Trace("O"); rc = Trace(tv)
info   = parms                         /* to enable parsing          */

call A_INIT                            /* Initialization            -*/
     "NEWSTACK"
call I_TABLE_OPS                       /* ISPF activity             -*/
call O_OUTPUT_LIST                     /* Create BRTHDAYS           -*/
     "DELSTACK"

call ZB_SAVELOG                        /*                           -*/
if \sw.nested then call DUMP_QUEUE 'quiet' /*                       -*/
exit                                   /*@ BRTHDAYS                  */
/*
   Initialization
.  ----------------------------------------------------------------- */
A_INIT:                                /*@                           */
   if branch then call BRANCH
   address TSO

   call AL_SETUP_LOG                   /*                           -*/
   xea   = 'EA'x
   parse value ""   with,
               datelist
   parse value '0 0 0 0 0 0 0 0'   with,
               events.   .
   outdsn      = "BRTHDAYS.LIST"
   sw.0New     = SWITCH( "NEW" )
   @tn@        = KEYWD("FAMILY")
   if @tn@     = '' then do
      call AP_GET_PARMS                /*                           -*/
      end
   if @tn@     = '' then do
      helpmsg  = "Must specify the FAMILY for processing."
      call HELP                        /* ...and don't come back     */
      end
   openmode.   = "NOWRITE"
   alloc.0   = "NEW CATALOG UNIT(SYSDA) SPACE(5 5) TRACKS",
               "RECFM(V B) LRECL(255) BLKSIZE(0)"
   alloc.1   = "SHR"                   /* if it already exists...    */

   tempstat = Sysdsn(outdsn) = "OK"    /* 1=exists, 0=missing        */
   if tempstat & sw.0New then do
      "DELETE" outdsn
      tempstat = 0
      end

   skiptgt     = KEYWD( "SKIPTO" )
   if tempstat then call AR_RELOAD     /*                           -*/
   if Left( isptlib,1 ) = "'" then,
      tblds   = Strip( isptlib,,"'" )  /* unquoted                   */
   else,
      tblds  = Userid()"."isptlib      /* fully qualified            */
   stat  = Sysdsn( "'"tblds"("@tn@")'" )
   if stat <> "OK" then do
      tblds   = DFLTTLIB( @tn@ )
      isptlib = "'"tblds"'"
      end

   logpref = "("Branch("ID")")"
   call ZL_LOGMSG( exec_name "started by" Userid()  yyyymmdd  hhmmss )
   call ZL_LOGMSG( logpref "Arg:" argline )

return                                 /*@ A_INIT                    */
/*
   Build progress log
.  ----------------------------------------------------------------- */
AL_SETUP_LOG:                          /*@                           */
   if branch then call BRANCH
   address TSO

   msglim = SYSVAR( "SYSWTERM" ) - 12
   parse value "0 0 0 0 0" with,
                log#    log.  .
   parse value Date("S")  Time("S")  Time("N")  with,
               yyyymmdd   sssss      hhmmss  .
   hhmmss = Space( Translate( hhmmss,' ',':' ) ,0 )
   parse var yyyymmdd  4 yrdigit 5 mm 7 dd          /* 9 12 14 maybe */
   if Pos(yrdigit,"13579") > 0 then mm = mm + 12       /* mm=24      */
   logtag = Substr("ABCDEFGHIJKLMNOPQRSTUVWX",mm,1)    /* logtag=X   */
   subid  = logtag""dd""Left(  hhmmss,4 )              /* X141743  ? */
   vb4k.1    = "MOD"
   vb4k.0    = "NEW CATALOG UNIT(SYSDA) SPACE(1 5) TRACKS",
               "RECFM( V B ) LRECL( 255 ) BLKSIZE( 0 )"
   logdsn = "@LOG."exec_name"."subid".LIST"
   logstat = Sysdsn( logdsn ) = "OK"
   if logstat then ,
      call ZL_LOGMSG( "-------------------" )

return                                 /*@ AL_SETUP_LOG              */
/*
   Some parms were missing.  Offer a panel to collect any missing
   datapoints.
.  ----------------------------------------------------------------- */
AP_GET_PARMS:                          /*@                           */
   if branch then call BRANCH
   address ISPEXEC
   "CONTROL ERRORS RETURN"

   call DEIMBED                        /* Extract panels            -*/
   dd = ""
   do Words(ddnlist)                   /* each LIBDEF DD             */
      parse value ddnlist dd  with  dd ddnlist
      @ddn   = @ddn.dd                 /* PLIB322 <- PLIB            */
      "LIBDEF  ISP"dd "LIBRARY  ID("@ddn") STACK"
   end
   ddnlist = ddnlist dd

   fam   = @tn@
   if sw.0New then new = 'Y'
              else new = 'N'
   do forever
      "DISPLAY  PANEL( PARMS ) "
      if rc > 0 then leave
   end                                 /* forever                    */
   sw.0New = Pos( new,'yY' ) > 0
   @tn@    = fam

   logpref = "("Branch("ID")")"
   call ZL_LOGMSG( logpref "Dialog datapoints: ",
                   "Family:" @tn@";    Restart:" new";" ,
                 )

   dd = ""
   do Words(ddnlist)                   /* each LIBDEF DD             */
      parse value ddnlist dd  with  dd ddnlist
      @ddn   = @ddn.dd                 /* PLIB322 <- PLIB            */
      "LIBDEF  ISP"dd
      address TSO "FREE  FI("@ddn")"
   end
   ddnlist = ddnlist dd

return                                 /*@ AP_GET_PARMS              */
/*
   There is an existing BRTHDAYS.LIST.  Read it and populate EVENTS.
.  ----------------------------------------------------------------- */
AR_RELOAD:                             /*@                           */
   if branch then call BRANCH
   address TSO

   logpref = "("Branch("ID")")"
   "ALLOC FI( @RLD ) DA( "outdsn" ) SHR REU "
   "NEWSTACK"
   "EXECIO  *  DISKR  @RLD ( FINIS "
   "FREE  FI( @RLD ) "
   call ZL_LOGMSG( logpref queued() "events pre-loaded." )

   do queued()                         /* every line                 */
      parse pull tag txt
      if WordPos( tag,datelist ) = 0 then do
         datelist = datelist tag
         events.tag = ''
         end                           /* wordpos                    */
      events.tag = events.tag txt xea
   end                                 /* queued                     */
   "DELSTACK"

return                                 /*@ AR_RELOAD                 */
/*
   Open table, spin collecting birthday info, queue data, TBEND.
.  ----------------------------------------------------------------- */
I_TABLE_OPS:                           /*@                           */
   if branch then call BRANCH
   address ISPEXEC
   "CONTROL ERRORS RETURN"

   call IA_PROLOG                      /* Ready table               -*/
   call IL_LOOP_TABLE                  /* Spin table, collect data  -*/

   "TBEND  " @tn@

return                                 /*@ I_TABLE_OPS               */
/*
   Open table
.  ----------------------------------------------------------------- */
IA_PROLOG:                             /*@                           */
   if branch then call BRANCH
   address ISPEXEC

   logpref = "("Branch("ID")")"
   "LIBDEF  ISPTLIB  DATASET  ID("isptlib")  STACK"
   "TBSTATS" @tn@ "STATUS1(s1) STATUS2(s2)"
   if s1 > 1 then do
      zerrsm = "Table" @tn@ "not available."
      say   zerrsm
      zerrlm = "Table" @tn@ "not found in the ISPTLIB library chain"
      "SETMSG  MSG(ISRZ002)"
      call ZL_LOGMSG( logpref zerrlm )
      sw.0error_found = "1"; return
      end; else,
   if s2 = 1 then do                   /* table is not open          */
      "TBOPEN "   @tn@   openmode.NOUPDT
      if rc > 4 then do
         sw.0error_found = 1
         zerrsm = "Table did not OPEN"
         zerrlm = "Table" @tn@ "cannot be opened due to prior",
                  "enqueues."
         "SETMSG  MSG(ISRZ002)"
         call ZL_LOGMSG( logpref zerrlm )
         end
      end
   else "TBTOP" @tn@
   "LIBDEF  ISPTLIB"

return                                 /*@ IA_PROLOG                 */
/*
   Spin through table, collecting data
.  ----------------------------------------------------------------- */
IL_LOOP_TABLE:                         /*@                           */
   il_tv = trace()                     /* what setting at entry ?    */
   if branch then call BRANCH
   address ISPEXEC

   logpref = "("Branch("ID")")"
   do forever

      if skiptgt <> '' then do
         parse value skiptgt   with  ftseq skiptgt
         "TBGET"  @tn@
         end
      else "TBSKIP" @tn@               /* next row                   */
      if rc > 0 then leave             /* end of table?              */

      if ftname = ""   then iterate

      if ftdeath = "" & Length(ftbirth) = 8 then do
                                     rc = Trace("O"); rc = trace(il_tv)
         parse var ftbirth ccyy 5 mmdd .
         tag  = mmdd||ccyy
         if WordPos( tag,datelist ) = 0 then do
            datelist = datelist tag
            events.tag  = ''
            end
         txt = "B" ftname "(" @tn@ ftseq ")"
         call ZL_LOGMSG( logpref txt )
         events.tag  = events.tag txt xea
         end
      if ftspdd  = "" & Length(ftspbd) = 8 then do
                                     rc = Trace("O"); rc = trace(il_tv)
         parse var ftspbd  ccyy 5 mmdd .
         tag  = mmdd||ccyy
         if WordPos( tag,datelist ) = 0 then do
            datelist = datelist tag
            events.tag  = ''
            end
         txt = "B" ftspouse "(" @tn@ ftseq ")"
         call ZL_LOGMSG( logpref txt )
         events.tag  = events.tag txt xea
         end
      if ftdeath = '' & ftspdd = '' & Length(ftweddt) = 8 then do
                                     rc = Trace("O"); rc = trace(il_tv)
         parse var ftweddt ccyy 5 mmdd .
         tag  = mmdd||ccyy
         if WordPos( tag,datelist ) = 0 then do
            datelist = datelist tag
            events.tag  = ''
            end
         txt = "W" ftname "and" ftspouse "(" @tn@ ftseq ")"
         call ZL_LOGMSG( logpref txt )
         events.tag  = events.tag txt xea
         end
   end                                 /* forever                    */

return                                 /*@ IL_LOOP_TABLE             */
/*
   Write queued data to PS output.
.  ----------------------------------------------------------------- */
O_OUTPUT_LIST:                         /*@                           */
   if branch then call BRANCH
   address TSO

   call OS_SORT                        /* sort events               -*/
   "ALLOC FI(@TMP) DA("outdsn") REU" alloc.tempstat
   "EXECIO" events.0 "DISKW @TMP ( stem events. FINIS"
   "FREE  FI(@TMP)"

   address ISPEXEC
   "VIEW  DATASET("outdsn") PROFILE(DEFAULT)"

return                                 /*@ O_OUTPUT_LIST             */
/*
   Sort DATELIST and output events in MMDD order
.  ----------------------------------------------------------------- */
OS_SORT:                               /*@                           */
   if branch then call BRANCH
   address TSO

   logpref = "("Branch("ID")")"
   datelist = STRSORT( datelist )
   call ZL_LOGMSG( logpref "DATELIST:" datelist )

   do Words( datelist )                /* every date                 */
      parse var datelist w1  datelist
      call ZL_LOGMSG( logpref "Working date" w1 )

      do while( events.w1 <> '' )
         parse var events.w1 txt (xea) events.w1
         txt = Strip( txt )
         call ZL_LOGMSG( logpref "        " txt )
         parse value events.0+1 w1 txt  with,
                     @z         events.@z   1  events.0  .
      end                              /* events.w1                  */
   end                                 /* datelist                   */
   call ZL_LOGMSG( logpref events.0 "events loaded." )

return                                 /*@ OS_SORT                   */
/*
.  ----------------------------------------------------------------- */
LOCAL_PREINIT:                         /*@ customize opts            */
   address TSO

   parse value KEYWD( "ISPTLIB" ) "'"DFLTTLIB()"'"   with,
               isptlib   .

   parse value KEYWD( "TBLTYP" )  "FT"       with,
               tbltyp    .

return                                 /*@ LOCAL_PREINIT             */
/*   subroutines below LOCAL_PREINIT are not selected by SHOWFLOW    */
/*
   Parse out the embedded components at the back of the source code.
.  ----------------------------------------------------------------- */
DEIMBED: Procedure expose,             /*@                           */
   (tk_globalvars)  ddnlist  @ddn.  daid.

   address TSO

   fb80po.0  = "NEW DELETE REU UNIT(SYSDA) SPACE(1 5) TRACKS DIR(40)",
                   "RECFM(F B) LRECL(80) BLKSIZE(0)"
   fb80po.1  = "SHR REU"
   parse value ""   with  ddnlist @ddn.  daid.

   lastln   = sourceline()
   currln   = lastln                   /*                            */
   if Left(sourceline(currln),2) <> "*/" then return

   currln = currln - 1                 /* previous line              */
   "NEWSTACK"
   address ISPEXEC
   do while sourceline(currln) <> "/*"
      text = sourceline(currln)        /* save with a short name !   */
      if Left(text,3) = ")))" then do  /* package the queue          */
         parse var text ")))" ddn mbr .   /* PLIB PANL001  maybe     */
         if length(ddn) > 4 then do    /* data, not ISPF             */
            call DESPOOL               /*                           -*/
            currln = currln - 1        /* previous line              */
            iterate
            end
         if Pos(ddn,ddnlist) = 0 then do  /* doesn't exist           */
            ddnlist = ddnlist ddn      /* keep track                 */
            @ddn = ddn || Random(999)  /* PLIB322 maybe              */
            @ddn.ddn = @ddn            /* @ddn.PLIB = PLIB322        */
            address TSO "ALLOC FI("@ddn")" fb80po.0
            "LMINIT DATAID(DAID) DDNAME("@ddn")"
            daid.ddn = daid
            end
         daid = daid.ddn
         "LMOPEN DATAID("daid") OPTION(OUTPUT)"
         do queued()
            parse pull line
            "LMPUT DATAID("daid") MODE(INVAR) DATALOC(LINE) DATALEN(80)"
         end
         "LMMADD DATAID("daid") MEMBER("mbr")"
         "LMCLOSE DATAID("daid")"
         end                           /* package the queue          */
      else push text                   /* onto the top of the stack  */
      currln = currln - 1              /* previous line              */
   end                                 /* while                      */
   address TSO "DELSTACK"
   return
/*
   Subroutine of DEIMBED for non-ISPF data.
   Given: the stack, ddn, and mbr
.  ----------------------------------------------------------------- */
DESPOOL:                               /*@                           */
   if branch then call BRANCH
   address TSO

   if WordPos( ddn,ddnlist ) = 0 then,
      ddnlist = Space( ddnlist ddn,1 )
   if Sysdsn(ddn".DATA") <> "OK" then,
      "ALLOC FI("ddn") DA("ddn".DATA)" fb80po.0
   "ALLOC FI("ddn") DA("ddn".DATA("mbr")) SHR REU"
   "EXECIO" queued() "DISKW" ddn "(FINIS"
   "DELSTACK"
   "NEWSTACK"                          /* re-establish               */

return                                 /*@ DESPOOL                   */

return                                 /*@ DEIMBED                   */
/*
.  ----------------------------------------------------------------- */
ZB_SAVELOG:                            /*@                           */
   if branch then call BRANCH
   address TSO

   if Symbol("LOG#") = "LIT" then return          /* not yet set     */

   "ALLOC FI(@LOG) DA("logdsn") REU" vb4k.logstat
   "EXECIO" log# "DISKW @LOG (STEM LOG. FINIS"
   "FREE  FI(@LOG)"

return                                 /*@ ZB_SAVELOG                */
/*
.  ----------------------------------------------------------------- */
ZL_LOGMSG: Procedure expose,           /*@                           */
   (tk_globalvars)  log. log#  msglim
   rc = Trace("O")
   address TSO

   parse arg msgtext

   /* for making the msgline always reasonably short:                */
   do while Length(msgtext) > msglim
      pt    = LastPos(" ",msgtext,msglim)
      slug  = Left(msgtext,pt)
      if monitor then say,
         slug
      parse value  log#+1  slug        with,
                   zz      log.zz    1  log#   .
      msgtext = "       "Substr(msgtext,pt)
   end                                 /* while msglim               */

   parse value  log#+1  msgtext     with,
                zz      log.zz    1  log#   .

   if monitor then say,
      msgtext

return                                 /*@ ZL_LOGMSG                 */
/*
.  ----------------------------------------------------------------- */
HELP:                                  /*@                           */
address TSO;"CLEAR"
if helpmsg <> "" then say helpmsg; say ""
ex_nam = Left(exec_name,8)             /* predictable size           */

say "  "ex_nam"      Produces a list of birthdays and wedding anniversaries    "
say "                from a FAMTREE table.                                     "
say "                                                                          "
say "  Syntax:   "ex_nam"  FAMILY   name                             (Required)"
say "                      NEW                                                 "
say "                ((    ISPTLIB  library                          (Defaults)"
say "                                                                          "
say "            name      Names the family table to be processed.             "
say "                                                                          "
say "            NEW       Wipes out the prior BRTHDAYS.LIST and creates a     "
say "                      fresh dataset.  Normal processing is to allocate an "
say "                      existing BRTHDAYS.LIST as MOD so that additional    "
say "                      families may be appended.                           "
say "                                                                          "
say "            library   Names the table library.  If not specified, it will "
say "                      default to 'FCLARKE.OPEN.ISPTLIB'                   "
say "                                                                          "
"NEWSTACK"; pull ; "CLEAR" ; "DELSTACK"
say "   Debugging tools provided include:                                      "
say "                                                                          "
say "        MONITOR:  displays key information throughout processing.         "
say "                                                                          "
say "        BRANCH:   show all paragraph entries.                             "
say "                                                                          "
say "        TRACE tv: will use value following TRACE to place the             "
say "                  execution in REXX TRACE Mode.                           "
say "                                                                          "
say "                                                                          "
say "   Debugging tools can be accessed in the following manner:               "
say "                                                                          "
say "        TSO "ex_nam"  parameters     ((  debug-options                    "
say "                                                                          "
say "   For example:                                                           "
say "                                                                          "
say "        TSO "ex_nam"  (( MONITOR TRACE ?R                                 "

if sysvar("SYSISPF") = "ACTIVE" then,
   address ISPEXEC "CONTROL DISPLAY REFRESH"
exit                                   /*@ HELP                      */
/*
.  ----------------------------------------------------------------- */
BRANCH: Procedure expose,              /*@                           */
        sigl exec_name
   rc = trace("O")                     /* we do not want to see this */
   arg brparm .

   origin = sigl                       /* where was I called from ?  */
   do currln = origin to 1 by -1       /* inch backward to label     */
      if Right(Word(Sourceline(currln),1),1) = ":" then do
         parse value sourceline(currln) with pgfname ":" .  /* Label */
         leave ; end                   /*                name        */
   end                                 /* currln                     */

   select
      when brparm = "NAME" then return(pgfname) /* Return full name  */
      when brparm = "ID"      then do           /* wants the prefix  */
         parse var pgfname pgfpref "_" .        /* get the prefix    */
         return(pgfpref)
         end                           /* brparm = "ID"              */
      otherwise
         say left(sigl,6) left(pgfname,40) exec_name "Time:" time("L")
   end                                 /* select                     */

return                                 /*@ BRANCH                    */
/*
.  ----------------------------------------------------------------- */
DUMP_QUEUE:                            /*@ Take whatever is in stack */
   rc = trace("O")                     /*  and write to the screen   */
   address TSO
   arg mode .

   "QSTACK"                            /* how many stacks?           */
   stk2dump    = rc - tk_init_stacks   /* remaining stacks           */
   if stk2dump = 0 & queued() = 0 then return
   if mode <> "QUIET" then,
   say "Total Stacks" rc ,             /* rc = #of stacks            */
    "   Begin Stacks" tk_init_stacks , /* Stacks present at start    */
    "   Excess Stacks to dump" stk2dump

   do dd = rc to tk_init_stacks by -1  /* empty each one.            */
      if mode <> "QUIET" then,
      say "Processing Stack #" dd "   Total Lines:" queued()
      do queued();parse pull line;say line;end /* pump to the screen */
      "DELSTACK"                       /* remove stack               */
   end                                 /* dd = 1 to rc               */

return                                 /*@ DUMP_QUEUE                */
/* Handle CLIST-form keywords             added 20020513
.  ----------------------------------------------------------------- */
CLKWD: Procedure expose info           /*@ hide all except info      */
   arg kw
   kw = kw"("                          /* form is 'KEY(DATA)'        */
   kw_pos = Pos(kw,info)               /* find where it is, maybe    */
   if kw_pos = 0 then return ""        /* send back a null, not found*/
   rtpt   = Pos(") ",info" ",kw_pos)   /* locate end-paren           */
   slug   = Substr(info,kw_pos,rtpt-kw_pos+1)     /* isolate         */
   info   = Delstr(info,kw_pos,rtpt-kw_pos+1)     /* excise          */
   parse var slug (kw)     slug        /* drop kw                    */
   slug   = Reverse(Substr(Reverse(Strip(slug)),2))
return slug                            /*@CLKWD                      */
/* Handle multi-word keys 20020513
.  ----------------------------------------------------------------- */
KEYWD: Procedure expose info           /*@ hide all vars, except info*/
   arg kw
   kw_pos = wordpos(kw,info)           /* find where it is, maybe    */
   if kw_pos = 0 then return ""        /* send back a null, not found*/
   kw_val = word(info,kw_pos+Words(kw))/* get the next word          */
   info   = Delword(info,kw_pos,2)     /* remove both                */
return kw_val                          /*@ KEYWD                     */
/*
.  ----------------------------------------------------------------- */
KEYPHRS: Procedure expose,             /*@                           */
         info helpmsg exec_name        /*  except these three        */
   arg kp
   wp    = wordpos(kp,info)            /* where is it?               */
   if wp = 0 then return ""            /* not found                  */
   front = subword(info,1,wp-1)        /* everything before kp       */
   back  = subword(info,wp+1)          /* everything after kp        */
   parse var back dlm back             /* 1st token must be 2 bytes  */
   if length(dlm) <> 2 then            /* Must be two bytes          */
      helpmsg = helpmsg,
         "Invalid length for delimiter("dlm") with KEYPHRS("kp")",
         info
   if wordpos(dlm,back) = 0 then       /* search for ending delimiter*/
      helpmsg = helpmsg,
         "No matching second delimiter("dlm") with KEYPHRS("kp")",
         info
   if helpmsg <> "" then call HELP     /* Something is wrong         */
   parse var back kpval (dlm) back     /* get everything b/w delim   */
   info =  front back                  /* restore remainder          */
return Strip(kpval)                    /*@ KEYPHRS                   */
/*
.  ----------------------------------------------------------------- */
NOVALUE:                               /*@                           */
   say exec_name "raised NOVALUE at line" sigl
   say " "
   say "The referenced variable is" condition("D")
   say " "
   zsigl = sigl
   signal SHOW_SOURCE                  /*@ NOVALUE                   */
/*
.  ----------------------------------------------------------------- */
SHOW_SOURCE:                           /*@                           */
   call DUMP_QUEUE                     /* Spill contents of stacks  -*/
   if sourceline() <> "0" then         /* to screen                  */
      say sourceline(zsigl)
   rc =  trace("?R")
   nop
   exit                                /*@ SHOW_SOURCE               */
/*
.  ----------------------------------------------------------------- */
SS: Procedure                          /*@ Show Source               */
   arg  ssbeg  ssend  .
   if ssend = "" then ssend = 10
   if \datatype(ssbeg,"W") | \datatype(ssend,"W") then return
   ssend = ssbeg + ssend
   do ssii = ssbeg to ssend ; say Strip(sourceline(ssii),'T') ; end
return                                 /*@ SS                        */
/*
.  ----------------------------------------------------------------- */
SWITCH: Procedure expose info          /*@                           */
   arg kw
   sw_val = Wordpos(kw,info) > 0       /* exists = 1; not found = 0  */
   if sw_val then                      /* exists                     */
      info = Delword(info,Wordpos(kw,info),1) /* remove it           */
return sw_val                          /*@ SWITCH                    */
/*
.  ----------------------------------------------------------------- */
SYNTAX:                                /*@                           */
   errormsg = exec_name "encountered REXX error" rc "in line" sigl":",
                        errortext(rc)
   say errormsg
   zsigl = sigl
   signal SHOW_SOURCE                  /*@ SYNTAX                    */
/*
   Can call TRAPOUT.
.  ----------------------------------------------------------------- */
TOOLKIT_INIT:                          /*@                           */
   address TSO
   info = Strip(opts,"T",")")          /* clip trailing paren        */

   parse source  sys_id  how_invokt  exec_name  DD_nm  DS_nm,
                     as_invokt  cmd_env  addr_spc  usr_tokn

   parse value "" with  tv  helpmsg  .
   parse value 0   "ISR00000  YES"     "Error-Press PF1"    with,
               sw.  zerrhm    zerralrm  zerrsm

   if SWITCH("TRAPOUT") then do
      "TRAPOUT" exec_name parms "(( TRACE R" info
      exit
      end                              /* trapout                    */

   sw.nested    = sysvar("SYSNEST") = "YES"
   sw.batch     = sysvar("SYSENV")  = "BACK"
   sw.inispf    = sysvar("SYSISPF") = "ACTIVE"

   if Word(parms,1) = "?" then call HELP /* I won't be back          */

   "QSTACK" ; tk_init_stacks = rc      /* How many stacks?           */

   parse value SWITCH("BRANCH") SWITCH("MONITOR") SWITCH("NOUPDT") with,
               branch           monitor           noupdt    .

   parse value mvsvar("SYSNAME") sysvar("SYSNODE") with,
               #tk_cpu           node          .

   parse value KEYWD("TRACE")  "N"    with   tv  .
   tk_globalvars = "exec_name  tv  helpmsg  sw.  zerrhm  zerralrm ",
                   "zerrsm  zerrlm  tk_init_stacks  branch  monitor ",
                   "noupdt"

   call LOCAL_PREINIT                  /* for more opts             -*/

return                                 /*@ TOOLKIT_INIT              */
/*      ISPF assets follow immediately
))) PLIB     PARMS    Get missing parms
)ATTR
  % TYPE( TEXT  )  INTENS( HIGH ) SKIP( ON )
  + TYPE( TEXT  )  INTENS( LOW  ) SKIP( ON )
  @ TYPE( TEXT  )  INTENS( HIGH )           COLOR( YELLOW )
  _ TYPE( INPUT )  INTENS( LOW  )           CAPS( ON )
  ! TYPE( INPUT )  INTENS( HIGH )
)BODY EXPAND(||)
@|-|% Specify required parameters @|-|
%COMMAND ===>_ZCMD
                                                              %SCROLL ===>_ZAMT+
+
+    Family name ===>!fam     +
+
+     Start anew ===>!z+      +(%Y+or%N+)
+
%     PF3+to finish
+
)INIT
   .ZVARS = '( NEW )'
   .HELP  = PARMSH
)PROC
)END
))) PLIB     PARMSH   HELP for PARMS
)ATTR
  % TYPE( TEXT   ) INTENS( HIGH )  SKIP( ON )
  + TYPE( TEXT   ) INTENS( LOW  )  SKIP( ON )
  _ TYPE( INPUT  ) INTENS( HIGH )
  ! TYPE( OUTPUT ) INTENS( HIGH )  SKIP( ON )
  @ TYPE( OUTPUT ) INTENS( LOW  )  SKIP( ON )
  } AREA( SCRL   )         EXTEND( ON )
)BODY EXPAND(||)
%TUTORIAL |-| Specify required parameters |-| TUTORIAL
%Next Selection ===>_ZCMD

+
}hlptxt                                                                        }
)AREA HLPTXT
+
+   Enter the%family+name to be scanned.
+
+   If BRTHDAYS.LIST (the default output dataset) is to be reloaded
+      'from scratch', enter%'Y'+for 'Start anew'.  If it is to be
+      added-to by another family, enter%'N'.
+
)PROC
  &ZUP   = PARMSH
  &ZCONT = PARMSH
)END
*/
